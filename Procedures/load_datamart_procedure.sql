CREATE OR REPLACE PROCEDURE load_data_into_datamart()
  RETURNS STRING
  LANGUAGE SQL
  EXECUTE AS CALLER
AS
$$
BEGIN
    -- Merging into DIM_DATE_TIME
    MERGE INTO COURSE_DEMO.public.DIM_DATE_TIME AS tgt
    USING (SELECT DISTINCT W_DATE FROM weather) AS src
    ON tgt.TIME_ID = src.W_DATE
    WHEN NOT MATCHED THEN
        INSERT (TIME_ID) VALUES (src.W_DATE);

    -- Merging into DIM_WEATHER
    MERGE INTO COURSE_DEMO.public.DIM_WEATHER AS tgt
    USING (SELECT DISTINCT WEATHER_ID, W_DATE, AWND, PRCP, TAVG FROM weather) AS src
    ON tgt.WEATHER_ID = src.WEATHER_ID
    WHEN NOT MATCHED THEN
        INSERT (WEATHER_ID, W_DATE, AWND, PRCP, TAVG) 
        VALUES (src.WEATHER_ID, src.W_DATE, src.AWND, src.PRCP, src.TAVG);

    -- Merging into DIM_ZONE
    MERGE INTO COURSE_DEMO.public.DIM_ZONE AS tgt
    USING (SELECT DISTINCT LOCATIONID, ZONE FROM zone) AS src
    ON tgt.LOCATIONID = src.LOCATIONID
    WHEN NOT MATCHED THEN
        INSERT (LOCATIONID, ZONE) 
        VALUES (src.LOCATIONID, src.ZONE);

    -- Merging into DIM_CITIBIKE
    MERGE INTO COURSE_DEMO.public.DIM_CITIBIKE AS tgt
    USING (SELECT DISTINCT RIDE_ID, RIDEABLE_TYPE, STARTED_AT, ENDED_AT, DURATION, START_REGION, START_STATION_NAME, START_STATION_ID, END_REGION, END_STATION_NAME, END_STATION_ID, START_LAT, START_LNG, END_LAT, END_LNG, MEMBER_CASUAL FROM citibike) AS src
    ON tgt.RIDE_ID = src.RIDE_ID
    WHEN NOT MATCHED THEN
        INSERT (RIDE_ID, RIDEABLE_TYPE, STARTED_AT, ENDED_AT, DURATION, START_REGION, START_STATION_NAME, START_STATION_ID, END_REGION, END_STATION_NAME, END_STATION_ID, START_LAT, START_LNG, END_LAT, END_LNG, MEMBER_CASUAL) 
        VALUES (src.RIDE_ID, src.RIDEABLE_TYPE, src.STARTED_AT, src.ENDED_AT, src.DURATION, src.START_REGION, src.START_STATION_NAME, src.START_STATION_ID, src.END_REGION, src.END_STATION_NAME, src.END_STATION_ID, src.START_LAT, src.START_LNG, src.END_LAT, src.END_LNG, src.MEMBER_CASUAL);

    -- Merging into DIM_YELLOW_TAXI
    MERGE INTO COURSE_DEMO.public.DIM_YELLOW_TAXI AS tgt
    USING (SELECT DISTINCT YELLOWTAXI_TRIP_ID, VENDORID, TPEP_PICKUP_DATETIME, TPEP_DROPOFF_DATETIME, DURATION, PASSENGER_COUNT, TRIP_DISTANCE, RATECODEID, STORE_AND_FWD_FLAG, PULOCATIONID, DOLOCATIONID, PAYMENT_TYPE, FARE_AMOUNT, EXTRA, MTA_TAX, TIP_AMOUNT, TOLLS_AMOUNT, IMPROVEMENT_SURCHARGE, TOTAL_AMOUNT, CONGESTION_SURCHARGE, AIRPORT_FEE FROM yellow_taxi) AS src
    ON tgt.YELLOWTAXI_TRIP_ID = src.YELLOWTAXI_TRIP_ID
    WHEN NOT MATCHED THEN
        INSERT (YELLOWTAXI_TRIP_ID, VENDORID, TPEP_PICKUP_DATETIME, TPEP_DROPOFF_DATETIME, DURATION, PASSENGER_COUNT, TRIP_DISTANCE, RATECODEID, STORE_AND_FWD_FLAG, PULOCATIONID, DOLOCATIONID, PAYMENT_TYPE, FARE_AMOUNT, EXTRA, MTA_TAX, TIP_AMOUNT, TOLLS_AMOUNT, IMPROVEMENT_SURCHARGE, TOTAL_AMOUNT, CONGESTION_SURCHARGE, AIRPORT_FEE) 
        VALUES (src.YELLOWTAXI_TRIP_ID, src.VENDORID, src.TPEP_PICKUP_DATETIME, src.TPEP_DROPOFF_DATETIME, src.DURATION, src.PASSENGER_COUNT, src.TRIP_DISTANCE, src.RATECODEID, src.STORE_AND_FWD_FLAG, src.PULOCATIONID, src.DOLOCATIONID, src.PAYMENT_TYPE, src.FARE_AMOUNT, src.EXTRA, src.MTA_TAX, src.TIP_AMOUNT, src.TOLLS_AMOUNT, src.IMPROVEMENT_SURCHARGE, src.TOTAL_AMOUNT, src.CONGESTION_SURCHARGE, src.AIRPORT_FEE);

    -- Merging into FACT_TRIP
    MERGE INTO COURSE_DEMO.public.FACT_TRIP AS tgt
    USING (
        SELECT DISTINCT 
            w.W_DATE AS TIME_ID, 
            w.WEATHER_ID AS WEATHER_ID, 
            c.RIDE_ID AS CITIBIKE_TRIP_ID, 
            y.YELLOWTAXI_TRIP_ID AS YELLOWTAXI_TRIP_ID, 
            c.START_REGION AS START_LOCATION_ID, 
            c.END_REGION AS END_LOCATION_ID, 
            (c.DURATION - y.DURATION) AS DURATION_DIFF
        FROM citibike c
        INNER JOIN yellow_taxi y
            ON c.START_REGION = y.PULOCATIONID
            AND c.END_REGION = y.DOLOCATIONID
        INNER JOIN weather w
            ON DATE(c.STARTED_AT) = w.W_DATE
    ) AS src
    ON tgt.TIME_ID = src.TIME_ID 
    AND tgt.WEATHER_ID = src.WEATHER_ID
    AND tgt.CITIBIKE_TRIP_ID = src.CITIBIKE_TRIP_ID
    AND tgt.YELLOWTAXI_TRIP_ID = src.YELLOWTAXI_TRIP_ID
    WHEN NOT MATCHED THEN
        INSERT (TIME_ID, WEATHER_ID, CITIBIKE_TRIP_ID, YELLOWTAXI_TRIP_ID, START_LOCATION_ID, END_LOCATION_ID, DURATION_DIFF)
        VALUES (src.TIME_ID, src.WEATHER_ID, src.CITIBIKE_TRIP_ID, src.YELLOWTAXI_TRIP_ID, src.START_LOCATION_ID, src.END_LOCATION_ID, src.DURATION_DIFF);

    RETURN 'Data load into datamart completed successfully.';
END;
$$;



CALL load_data_into_datamart();